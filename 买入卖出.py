# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '买入卖出.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import json
from web3 import Web3,HTTPProvider,WebsocketProvider,module
import requests
import config
from PyQt5 import QtCore, QtGui, QtWidgets
import time
import sys
from PyQt5.QtWidgets import QApplication, QWidget
# 检查是否连接
url='https://rpc03-sg.dogechain.dog/'
w3= Web3(HTTPProvider(url))
# 添加调用的合约地址及合约ABI创建合约调用对象
Dogecontract_abi=[{"type":"constructor","stateMutability":"nonpayable","inputs":[{"type":"address","name":"_factory","internalType":"address"},{"type":"address","name":"_WWDOGE","internalType":"address"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"WWDOGE","inputs":[]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountA","internalType":"uint256"},{"type":"uint256","name":"amountB","internalType":"uint256"},{"type":"uint256","name":"liquidity","internalType":"uint256"}],"name":"addLiquidity","inputs":[{"type":"address","name":"tokenA","internalType":"address"},{"type":"address","name":"tokenB","internalType":"address"},{"type":"uint256","name":"amountADesired","internalType":"uint256"},{"type":"uint256","name":"amountBDesired","internalType":"uint256"},{"type":"uint256","name":"amountAMin","internalType":"uint256"},{"type":"uint256","name":"amountBMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"payable","outputs":[{"type":"uint256","name":"amountToken","internalType":"uint256"},{"type":"uint256","name":"amountWDOGE","internalType":"uint256"},{"type":"uint256","name":"liquidity","internalType":"uint256"}],"name":"addLiquidityWDOGE","inputs":[{"type":"address","name":"token","internalType":"address"},{"type":"uint256","name":"amountTokenDesired","internalType":"uint256"},{"type":"uint256","name":"amountTokenMin","internalType":"uint256"},{"type":"uint256","name":"amountWDOGEMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"address","name":"","internalType":"address"}],"name":"factory","inputs":[]},{"type":"function","stateMutability":"pure","outputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"}],"name":"getAmountIn","inputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"},{"type":"uint256","name":"reserveIn","internalType":"uint256"},{"type":"uint256","name":"reserveOut","internalType":"uint256"}]},{"type":"function","stateMutability":"pure","outputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"}],"name":"getAmountOut","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"uint256","name":"reserveIn","internalType":"uint256"},{"type":"uint256","name":"reserveOut","internalType":"uint256"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"getAmountsIn","inputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"}]},{"type":"function","stateMutability":"view","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"getAmountsOut","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"}]},{"type":"function","stateMutability":"pure","outputs":[{"type":"uint256","name":"amountB","internalType":"uint256"}],"name":"quote","inputs":[{"type":"uint256","name":"amountA","internalType":"uint256"},{"type":"uint256","name":"reserveA","internalType":"uint256"},{"type":"uint256","name":"reserveB","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountA","internalType":"uint256"},{"type":"uint256","name":"amountB","internalType":"uint256"}],"name":"removeLiquidity","inputs":[{"type":"address","name":"tokenA","internalType":"address"},{"type":"address","name":"tokenB","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountAMin","internalType":"uint256"},{"type":"uint256","name":"amountBMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountToken","internalType":"uint256"},{"type":"uint256","name":"amountWDOGE","internalType":"uint256"}],"name":"removeLiquidityWDOGE","inputs":[{"type":"address","name":"token","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountTokenMin","internalType":"uint256"},{"type":"uint256","name":"amountWDOGEMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountWDOGE","internalType":"uint256"}],"name":"removeLiquidityWDOGESupportingFeeOnTransferTokens","inputs":[{"type":"address","name":"token","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountTokenMin","internalType":"uint256"},{"type":"uint256","name":"amountWDOGEMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountToken","internalType":"uint256"},{"type":"uint256","name":"amountWDOGE","internalType":"uint256"}],"name":"removeLiquidityWDOGEWithPermit","inputs":[{"type":"address","name":"token","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountTokenMin","internalType":"uint256"},{"type":"uint256","name":"amountWDOGEMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"},{"type":"bool","name":"approveMax","internalType":"bool"},{"type":"uint8","name":"v","internalType":"uint8"},{"type":"bytes32","name":"r","internalType":"bytes32"},{"type":"bytes32","name":"s","internalType":"bytes32"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountWDOGE","internalType":"uint256"}],"name":"removeLiquidityWDOGEWithPermitSupportingFeeOnTransferTokens","inputs":[{"type":"address","name":"token","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountTokenMin","internalType":"uint256"},{"type":"uint256","name":"amountWDOGEMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"},{"type":"bool","name":"approveMax","internalType":"bool"},{"type":"uint8","name":"v","internalType":"uint8"},{"type":"bytes32","name":"r","internalType":"bytes32"},{"type":"bytes32","name":"s","internalType":"bytes32"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256","name":"amountA","internalType":"uint256"},{"type":"uint256","name":"amountB","internalType":"uint256"}],"name":"removeLiquidityWithPermit","inputs":[{"type":"address","name":"tokenA","internalType":"address"},{"type":"address","name":"tokenB","internalType":"address"},{"type":"uint256","name":"liquidity","internalType":"uint256"},{"type":"uint256","name":"amountAMin","internalType":"uint256"},{"type":"uint256","name":"amountBMin","internalType":"uint256"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"},{"type":"bool","name":"approveMax","internalType":"bool"},{"type":"uint8","name":"v","internalType":"uint8"},{"type":"bytes32","name":"r","internalType":"bytes32"},{"type":"bytes32","name":"s","internalType":"bytes32"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapExactTokensForTokens","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"swapExactTokensForTokensSupportingFeeOnTransferTokens","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapExactTokensForWDOGE","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[],"name":"swapExactTokensForWDOGESupportingFeeOnTransferTokens","inputs":[{"type":"uint256","name":"amountIn","internalType":"uint256"},{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"payable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapExactWDOGEForTokens","inputs":[{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"payable","outputs":[],"name":"swapExactWDOGEForTokensSupportingFeeOnTransferTokens","inputs":[{"type":"uint256","name":"amountOutMin","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapTokensForExactTokens","inputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"},{"type":"uint256","name":"amountInMax","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"nonpayable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapTokensForExactWDOGE","inputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"},{"type":"uint256","name":"amountInMax","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"function","stateMutability":"payable","outputs":[{"type":"uint256[]","name":"amounts","internalType":"uint256[]"}],"name":"swapWDOGEForExactTokens","inputs":[{"type":"uint256","name":"amountOut","internalType":"uint256"},{"type":"address[]","name":"path","internalType":"address[]"},{"type":"address","name":"to","internalType":"address"},{"type":"uint256","name":"deadline","internalType":"uint256"}]},{"type":"receive","stateMutability":"payable"}]
Dogecontract_address='0xa4EE06Ce40cb7e8c04E127c1F7D3dFB7F7039C81'
Dogecontract = w3.eth.contract(address=Dogecontract_address, abi=Dogecontract_abi)
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.setWindowModality(QtCore.Qt.NonModal)
        Form.resize(733, 403)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(Form)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 3, 1, 1)
        self.AccountAddress = QtWidgets.QLineEdit(Form)
        self.AccountAddress.setObjectName("AccountAddress")
        self.gridLayout.addWidget(self.AccountAddress, 1, 0, 1, 1)
        self.AccountPrivate = QtWidgets.QLineEdit(Form)
        self.AccountPrivate.setObjectName("AccountPrivate")
        self.gridLayout.addWidget(self.AccountPrivate, 1, 1, 1, 2)
        self.GasLimit = QtWidgets.QLineEdit(Form)
        self.GasLimit.setObjectName("GasLimit")
        self.gridLayout.addWidget(self.GasLimit, 1, 3, 1, 1)
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 2, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 2, 3, 1, 1)
        self.BuyDogeAmount = QtWidgets.QLineEdit(Form)
        self.BuyDogeAmount.setObjectName("BuyDogeAmount")
        self.gridLayout.addWidget(self.BuyDogeAmount, 3, 0, 1, 1)
        self.TokenAddressBuy = QtWidgets.QLineEdit(Form)
        self.TokenAddressBuy.setObjectName("TokenAddressBuy")
        self.gridLayout.addWidget(self.TokenAddressBuy, 3, 1, 1, 2)
        self.Slidder = QtWidgets.QLineEdit(Form)
        self.Slidder.setObjectName("Slidder")
        self.gridLayout.addWidget(self.Slidder, 3, 3, 1, 1)
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 4, 0, 1, 1)
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 4, 1, 1, 1)
        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.gridLayout.addWidget(self.label_9, 4, 3, 1, 1)
        self.SellTokenAmount = QtWidgets.QLineEdit(Form)
        self.SellTokenAmount.setObjectName("SellTokenAmount")
        self.gridLayout.addWidget(self.SellTokenAmount, 5, 0, 1, 1)
        self.TokenAddressSpend = QtWidgets.QLineEdit(Form)
        self.TokenAddressSpend.setObjectName("TokenAddressSpend")
        self.gridLayout.addWidget(self.TokenAddressSpend, 5, 1, 1, 2)
        self.GetDogeMin = QtWidgets.QLineEdit(Form)
        self.GetDogeMin.setObjectName("GetDogeMin")
        self.gridLayout.addWidget(self.GetDogeMin, 5, 3, 1, 1)
        self.ExecuteBuy = QtWidgets.QPushButton(Form)
        self.ExecuteBuy.setObjectName("ExecuteBuy")
        self.gridLayout.addWidget(self.ExecuteBuy, 6, 0, 1, 1)
        self.ExecuteSell = QtWidgets.QPushButton(Form)
        self.ExecuteSell.setObjectName("ExecuteSell")
        self.gridLayout.addWidget(self.ExecuteSell, 6, 2, 1, 2)
        self.label_10 = QtWidgets.QLabel(Form)
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 6, 4, 1, 1)
        self.TextEditTip = QtWidgets.QTextEdit(Form)
        self.TextEditTip.setEnabled(True)
        self.TextEditTip.setMaximumSize(QtCore.QSize(16777215, 192))
        self.TextEditTip.setObjectName("TextEditTip")
        self.gridLayout.addWidget(self.TextEditTip, 7, 4, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "账户地址"))
        self.label_2.setText(_translate("Form", "账户私钥"))
        self.label_4.setText(_translate("Form", "gasLimit"))
        self.label_3.setText(_translate("Form", "买入doge数量"))
        self.label_5.setText(_translate("Form", "Token地址"))
        self.label_6.setText(_translate("Form", "滑点（最低得到数量）"))
        self.label_8.setText(_translate("Form", "卖出Token数量"))
        self.label_7.setText(_translate("Form", "Token地址"))
        self.label_9.setText(_translate("Form", "最小得到Doge数量"))
        self.ExecuteBuy.setText(_translate("Form", "执行买入"))
        self.ExecuteSell.setText(_translate("Form", "执行卖出"))
        self.label_10.setText(_translate("Form", "信息提示栏"))

class SwapFunction(Ui_Form):

    def BuyToken(self):
        TIME = time.strftime("%Y-%m-%d-%H:%M:%S")

        if not w3.isConnected():
            self.TextEditTip.setText(TIME + "节点未能成功连接，请尝试重新执行" + "\n")

        else:
            # 添加账户及私钥
            AccountAddress=self.AccountAddress.text()
            Account=w3.isChecksumAddress(AccountAddress)
            # 买入的合约地址
            TokenAddress=self.TokenAddressBuy.text()
            if not Account:
                self.TextEditTip.setText(TIME+"账户输入有误，请检查账户"+"\n")
            else:
                Doge_account = w3.toChecksumAddress(AccountAddress)

                # 个人私钥
                Doge_account_Private = self.AccountPrivate.text()

                # 买入数量
                BuyDogeAmount=int(self.BuyDogeAmount.text())

                # 允许的最低得到数量
                slidder=int(self.Slidder.text())
                #gasLimit
                gasLimit=int(self.GasLimit.text())
                # 发送doge，nonce是交易次数
                # 首先，我们获取获取帐户nonce或交易计数。这是交易的必填字段，因为它可以防止双花问题。
                nonce = w3.eth.getTransactionCount(Doge_account)
                amountOutMin = slidder

                wDogeAddress = w3.toChecksumAddress('0xb7ddc6414bf4f5515b52d8bdd69973ae205ff101')
                contractAddress = w3.toChecksumAddress(TokenAddress)
                # path = [wDogeAddress, contractAddress]
                to = Doge_account

                # 调用别人的合约方法时，必须附带build_transaction，否则无法使用
                gasPrice = w3.eth.gas_price

                # gasLimit=w3.eth.estimateGas
                tx = Dogecontract.functions.swapExactWDOGEForTokens(amountOutMin, [wDogeAddress, contractAddress], to,
                                                                    (int(time.time()) + 10000)).buildTransaction({
                    'from': Doge_account,
                    'value': w3.toWei(BuyDogeAmount, 'ether'),
                    'gas': gasLimit,
                    # 防止因gas过低导致交易失败
                    'gasPrice': w3.toWei(gasPrice, 'wei'),
                    'nonce': nonce,
                })

                # 签名
                signed_tx = w3.eth.account.signTransaction(tx, Doge_account_Private)

                # 得到交易哈希
                tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)


                self.TextEditTip.setText(TIME + "交易的哈希值为" + w3.toHex(tx_hash)+"\n")
    def SellToken(self):
        TIME = time.strftime("%Y-%m-%d-%H:%M:%S")

        if not w3.isConnected():
            self.TextEditTip.setText(TIME + "节点未能成功连接，请尝试重新执行" + "\n")

        else:
            # 添加账户及私钥
            AccountAddress=self.AccountAddress.text()
            Account=w3.isChecksumAddress(AccountAddress)
            # 买入的合约地址
            TokenAddressSpend=self.TokenAddressSpend.text()
            if not Account:
                self.TextEditTip.setText(TIME+"账户输入有误，请检查账户"+"\n")
            else:
                Doge_account = w3.toChecksumAddress(AccountAddress)

                # 个人私钥
                Doge_account_Private = self.AccountPrivate.text()
                try:
                    # 买入数量
                    SellTokenAmount=int(self.SellTokenAmount.text())

                    # 允许的最低得到数量
                    slidder=int(self.Slidder.text())
                    #gasLimit
                    gasLimit=int(self.GasLimit.text())
                    # 发送doge，nonce是交易次数
                    # 首先，我们获取获取帐户nonce或交易计数。这是交易的必填字段，因为它可以防止双花问题。
                    nonce = w3.eth.getTransactionCount(Doge_account)
                    amountOutMin = slidder

                    wDogeAddress = w3.toChecksumAddress('0xb7ddc6414bf4f5515b52d8bdd69973ae205ff101')
                    contractAddress = w3.toChecksumAddress(TokenAddressSpend)

                    to = Doge_account

                    # 调用别人的合约方法时，必须附带build_transaction，否则无法使用
                    gasPrice = w3.eth.gas_price

                    # gasLimit=w3.eth.estimateGas
                    tx = Dogecontract.functions.swapExactTokensForWDOGE(w3.toWei(SellTokenAmount, 'ether'),amountOutMin, [contractAddress, wDogeAddress], to,
                                                                        (int(time.time()) + 10000)).buildTransaction({
                        'gas': gasLimit,
                        # 防止因gas过低导致交易失败
                        'gasPrice': w3.toWei(gasPrice, 'wei'),
                        'nonce': nonce,
                    })

                    # 签名
                    signed_tx = w3.eth.account.signTransaction(tx, Doge_account_Private)

                    # 得到交易哈希
                    tx_hash = w3.eth.sendRawTransaction(signed_tx.rawTransaction)


                    self.TextEditTip.setText(TIME + "交易的哈希值为" + w3.toHex(tx_hash)+"\n")
                except Exception as e:
                    print(e)




if __name__ == '__main__':
    # QT运行固定格式
    app = QApplication(sys.argv)
    Widget = QWidget()
    ui = Ui_Form()
    ui.setupUi(Widget)
    Widget.show()
    ui.TextEditTip.setText("代码已开源，仅供交流学习使用，不适合上主链操作。上主链使用后如产生安全问题概不负责。思路交流请联系：https://s.denglianqiu.cn/smartContractComunication" + "\n")

    ui.ExecuteSell.clicked.connect(lambda :SwapFunction.SellToken(ui))
    ui.ExecuteBuy.clicked.connect(lambda :SwapFunction.BuyToken(ui))

    sys.exit(app.exec_())